# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Notification {
  id: Int!
  date: DateTime!
  description: String!
  lu: Boolean!
  collaborateur: Collaborateur!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Entretien {
  id: Int!
  date: DateTime!
  duree: String!
  statut: StatutEntretien!
  raisonAnnulation: String
  candidature: Candidature!
}

enum StatutEntretien {
  PLANIFIE
  REPORTE
  ANNULE
  EFFECTUE
}

type Candidature {
  id: Int!
  date: DateTime!
  cv: Cv!
  entretiens: [Entretien!]!
}

type Candidat {
  id: Int!
  nom: String!
  prenom: String!
  cin: Float!
  dateNaiss: DateTime!
  adresse: String
  tel: Float!
  email: String!
  avatar: String
}

type Langue {
  id: Int!
  nom: String!
  niveau: String!
  certifie: Boolean!
  cvs: [Cv!]!
}

type Formation {
  id: Int!
  universite: String!
  dateDebut: DateTime!
  dateFin: DateTime!
  specialite: String!
  niveau: String!
  mention: String
  cvs: [Cv!]!
}

type Experience {
  id: Int!
  societe: String!
  poste: String
  dateDebut: DateTime!
  dateFin: DateTime!
  description: String
  motCles: String
  cvs: [Cv!]!
}

type Competence {
  id: Int!
  nom: String!
  version: String
  niveau: String
  cvs: [Cv!]!
}

type ActiviteAssociative {
  id: Int!
  dateDebut: DateTime!
  dateFin: DateTime!
  association: String!
  poste: String
  description: String
  cvs: [Cv!]!
}

type Certificat {
  id: Int!
  dateObtention: DateTime!
  dateExpiration: DateTime
  organisation: String!
  niveau: String
  cvs: [Cv!]!
}

type Cv {
  id: Int!
  cmptLinkedin: String
  cmptGithub: String
  poste: String
  description: String
  statutCV: StatutCV!
  activiteAssociatives: [ActiviteAssociative!]
  certificats: [Certificat!]
  competences: [Competence!]
  experiences: [Experience!]
  formations: [Formation!]
  langues: [Langue!]
  candidatures: [Candidature!]
  candidat: Candidat!
}

enum StatutCV {
  RECU
  ACCEPTE
  REFUSE
}

type Collaborateur {
  id: Int!
  tel: Int!
  email: String!
  poste: String!
  salaire: Int!
  dateEmb: DateTime
  nomUtilisateur: String!
  motDePasse: String!
  roles: [UserRole!]!
  evaluation: Int
  equipe: Equipe
  notifications: [Notification!]
  cv: Cv!
}

enum UserRole {
  ADMIN
  RH
  RP
  TEAMLEADER
  COLABORATEUR
}

type Equipe {
  id: Int!
  nom: String!
  collaborateurs: [Collaborateur!]!
  pole: Pole!
  teamleader: Collaborateur!
}

type Pole {
  id: Int!
  nom: String!
  equipes: [Equipe!]
  rp: Collaborateur!
}

type Query {
  findCols(pole: Int): [Collaborateur!]!
  findCol(idCol: Int!): Collaborateur
  findPoles: [Pole!]!
  findPole(idPole: Int!): Pole!
  findEquipes: [Equipe!]!
  findEquipe(idEquipe: Int!): Equipe!
  findnotifs: [Notification!]!
  findnotif(idNotif: Int!): Notification!
  findEntretiens: [Entretien!]!
  findEntretien(idEnt: Int!): Entretien!
  findCvs: [Cv!]!
  findCv(idCv: Int!): Cv!
  findCvCandidat(idCand: Int!): Cv!
  findCertificats: [Certificat!]!
  findCertificat(idCertif: Int!): Certificat!
  findCompetences: [Competence!]!
  findCompetence(idComp: Int!): Competence!
  findExperiences: [Experience!]!
  findExperience(idExp: Int!): Experience!
  findExperiencesCv(idCv: Int!): [Experience!]!
  findFormations: [Formation!]!
  findFormation(idForm: Int!): Formation!
  findLangues: [Langue!]!
  findLangue(idLang: Int!): Langue!
  findActs: [ActiviteAssociative!]!
  findAct(idAct: Int!): ActiviteAssociative!
  findCandidats: [Candidat!]!
  findCandidat(idCand: Int!): Candidat!
  findCandidatures: [Candidature!]!
  findCandidature(id: Int!): Candidature!
}

type Mutation {
  createCol(createColInput: CreateColInput!): Collaborateur!
  updateCol(updateColInput: UpdateColInput!, idCol: Int!): Collaborateur!
  removeCol(idCol: Int!): Boolean!
  createPole(createPoleInput: CreatePoleInput!): Pole!
  createNotif(createNotifInput: CreateNotificationInput!): Notification!
  createCv(createCvInput: CreateCvInput!): Cv!
  updateCv(updateCvInput: UpdateCvInput!, idCv: Int!): Cv!
  removeCv(idCv: Int!): Boolean!
  createCandidat(createCandidatInput: CreateCandidatInput!): Candidat!
  updateCandidat(updateCandidatInput: UpdateCandidatInput!, idCandidat: Int!): Candidat!
  removeCandidat(idCand: Int!): Boolean!
}

input CreateColInput {
  tel: Int
  email: String!
  poste: String!
  salaire: Int!
  dateEmb: DateTime!
  nomUtilisateur: String!
  motDePasse: String!
  roles: [UserRole!]!
  evaluation: Int
  equipeId: ID!
}

input UpdateColInput {
  tel: Int
  email: String!
  poste: String
  salaire: Int
  dateEmb: DateTime
  nomUtilisateur: String
  motDePasse: String
  roles: [UserRole!]!
  evaluation: Int!
}

input CreatePoleInput {
  nom: String!
}

input CreateNotificationInput {
  date: DateTime!
  description: String!
  lu: Boolean = false
}

input CreateCvInput {
  cmptLinkedin: String
  cmptGithub: String
  poste: String
  description: String
  statutCV: String!
}

input UpdateCvInput {
  cmptLinkedin: String
  cmptGithub: String
  poste: String
  description: String
  statutCV: String
}

input CreateCandidatInput {
  cin: Int
  prenom: String!
  nom: String!
  dateNaiss: DateTime!
  adresse: String
  tel: Int!
  email: String!
  avatar: String
}

input UpdateCandidatInput {
  cin: Int
  prenom: String
  nom: String
  dateNaiss: DateTime
  adresse: String
  tel: Int
  email: String
  avatar: String
}
